#include "ets_sys.h"
#include "eagle_soc.h"
#include "osapi.h"
#include "os_type.h"
#include "gpio.h"
#include "user_interface.h"
#include "esp_sdk_ver.h"

#include "user_config.h"

#define WIFI_LED_IO_MUX     PERIPHS_IO_MUX_GPIO2_U
#define WIFI_LED_IO_NUM     2
#define WIFI_LED_IO_FUNC    FUNC_GPIO2

#if ESP_SDK_VERSION >= 020100
    #define _strcpy ets_strncpy
#else
    #define _strcpy ets_strcpy
#endif

os_timer_t process_timer;
    

void wifi_handle_event_cb(System_Event_t *evt)
{
    switch (evt->event) {
        case EVENT_STAMODE_CONNECTED:
            os_printf("[connect to ssid %s, channel %d]\n",
                evt->event_info.connected.ssid,
                evt->event_info.connected.channel);
            break;
        case EVENT_STAMODE_DISCONNECTED:
            os_printf("[disconnect from ssid %s, reason %d]\n",
                evt->event_info.disconnected.ssid,
                evt->event_info.disconnected.reason);
            break;
        case EVENT_STAMODE_AUTHMODE_CHANGE:
            os_printf("[mode: %d -> %d]\n",
                evt->event_info.auth_change.old_mode,
                evt->event_info.auth_change.new_mode);
            break;
        case EVENT_STAMODE_GOT_IP:
            os_printf("[ip:" IPSTR ",mask:" IPSTR ",gw:" IPSTR "]\n",
                IP2STR(&evt->event_info.got_ip.ip),
                IP2STR(&evt->event_info.got_ip.mask),
                IP2STR(&evt->event_info.got_ip.gw));
            break;
        default:
            os_printf("[event: %x]\n", evt->event);
            break;
    }
}

void ICACHE_FLASH_ATTR init_led(void) {
    os_printf("[Init LED on GPIO2]\n");
    PIN_FUNC_SELECT(PERIPHS_IO_MUX_GPIO2_U, FUNC_GPIO2);
    GPIO_OUTPUT_SET(2,1);
}

void ICACHE_FLASH_ATTR process(void* arg) {
    static char counter = 0;
    struct rst_info* reason_p;

    os_printf("[Progress! ADC: %d]\n", system_adc_read());
    os_printf("[Count: %d]\n", counter);
    if (GPIO_INPUT_GET(2)) {
        GPIO_OUTPUT_SET(2, 0);
    } else {
        GPIO_OUTPUT_SET(2,1);
    }
    reason_p = system_get_rst_info();
    os_printf("[Reset info: %d]\n", reason_p->reason);
    if (counter++ == 11) {
        os_printf("Going DEEP!");

        GPIO_OUTPUT_SET(2,1);
        // TODO: Figure out deep sleep without RF.
        if (!system_deep_sleep_set_option(2)) {
          os_printf("[Failed to set deep sleep option!]");
        }
        //system_deep_sleep(10000000ull);
    }
    counter %= 12;
}

void ICACHE_FLASH_ATTR user_init(void)
{
    struct station_config wifi_config;
    

    uart_div_modify(0, UART_CLK_FREQ/115200);
    os_delay_us(10000);

    //wifi_status_led_install(WIFI_LED_IO_NUM, WIFI_LED_IO_MUX, FUNC_GPIO0); 
    os_printf("[SDK version:%s]\n", system_get_sdk_version());

    // station mode: 
    if( !wifi_set_opmode(STATION_MODE) ) {
        os_printf("[failed setting station mode]\n");
    }

    // set station configuration, save to flash
    os_memset(&wifi_config,0,sizeof(wifi_config));
    _strcpy(wifi_config.ssid, SSID, os_strlen(SSID));
    //_strcpy(wifi_config.password, SSID_PASSWORD, os_strlen(SSID_PASSWORD));   // only for WPA2-PSK
    _strcpy(wifi_config.password, PASSWORD, os_strlen(PASSWORD));   // only for WPA2-Enterprise
    wifi_station_set_config(&wifi_config);

    // WPA2-Enterprise
    
    if (wifi_station_set_wpa2_enterprise_auth(1)) {
        os_printf("[failed to set WPA2-Enterprise]");
    }
    // ignore CA Certificate when testing
    // wifi_station_set_enterprise_ca_cert(ca_pem, ca_pem_len + 1);
    if (wifi_station_set_enterprise_username(PEAP_USER, os_strlen(PEAP_USER))) {
        os_printf("[failed to set username]");
    }
    if (wifi_station_set_enterprise_password(PEAP_PASSWORD, os_strlen(PEAP_PASSWORD))) {
        os_printf("[failed to set password]");
    }
    
    // no need to call connect() in user_init()
    //if( !wifi_station_connect() );
    os_timer_setfn(&process_timer, (os_timer_func_t*)process, NULL);
    os_timer_arm(&process_timer, 500, true);

    os_printf("[Maximum deep sleep time is %d seconds.\n]",
        (2^20-1) * system_rtc_clock_cali_proc() / 1E6);

    wifi_set_event_handler_cb(wifi_handle_event_cb);
}
